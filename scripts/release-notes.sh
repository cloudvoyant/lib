#!/usr/bin/env bash
: <<DOCUMENTATION
Generate user-friendly release notes from CHANGELOG.md using Claude CLI

Transforms the auto-generated CHANGELOG.md into more readable RELEASE_NOTES.md.

Requirements:
- Claude CLI installed (https://github.com/anthropics/claude-cli)
- CHANGELOG.md exists (generated by semantic-release)

Usage:
  bash scripts/release-notes.sh
DOCUMENTATION

# IMPORTS ----------------------------------------------------------------------
source "$(dirname "$0")/utils.sh"
setup_script_lifecycle

# CONFIGURATION ----------------------------------------------------------------
CHANGELOG_FILE="CHANGELOG.md"
NOTES_FILE="RELEASE_NOTES.md"

# CHECK DEPENDENCIES -----------------------------------------------------------
if ! command_exists claude; then
    log_error "Claude CLI not found"
    echo "Install: npm install -g @anthropic-ai/claude-cli" >&2
    echo "Or: brew install anthropics/claude/claude" >&2
    exit 1
fi

if [ ! -f "$CHANGELOG_FILE" ]; then
    log_error "CHANGELOG.md not found"
    echo "Run a release first to generate CHANGELOG.md" >&2
    exit 1
fi

# READ CHANGELOG ---------------------------------------------------------------
log_info "Reading $CHANGELOG_FILE..."

changelog_content=$(cat "$CHANGELOG_FILE")

if [ -z "$changelog_content" ]; then
    log_warn "CHANGELOG.md is empty"
    exit 0
fi

# GENERATE RELEASE NOTES -------------------------------------------------------
log_info "Generating user-friendly release notes with Claude..."

claude_prompt="Transform this technical CHANGELOG.md into user-friendly release notes.

CHANGELOG.md content:
$changelog_content

Generate a RELEASE_NOTES.md file with:
- Clear, concise summaries of what changed
- User-focused language (impact over implementation)
- Organized by release version
- Highlights of key features and improvements
- Breaking changes clearly marked
- Omit overly technical details

Keep the same version numbers and structure, but make it readable for end users who aren't developers.

Generate only the markdown content, no other commentary."

# Save prompt to temp file for piping to background process
TEMP_PROMPT=$(mktemp)
echo "$claude_prompt" > "$TEMP_PROMPT"

# Call Claude CLI in background and show spinner
claude < "$TEMP_PROMPT" > "$NOTES_FILE" 2>&1 &
claude_pid=$!
spinner $claude_pid "Generating release notes with Claude"

# Wait for Claude to finish and check result
wait $claude_pid
exit_code=$?

# Clean up temp file
rm -f "$TEMP_PROMPT"

if [ $exit_code -ne 0 ]; then
    log_error "Failed to generate release notes (exit code: $exit_code)"
    if [ -f "$NOTES_FILE" ]; then
        echo "Error output:" >&2
        cat "$NOTES_FILE" >&2
        rm "$NOTES_FILE"
    fi
    exit 1
fi

# Check if notes file has content
if [ ! -s "$NOTES_FILE" ]; then
    log_error "Release notes file is empty"
    exit 1
fi

log_success "Release notes generated: $NOTES_FILE"
echo ""
cat "$NOTES_FILE"
echo ""
log_info "Next steps:"
echo "  1. Review and edit $NOTES_FILE if needed"
echo "  2. Commit: git add $NOTES_FILE && git commit -m 'docs: user-friendly release notes'"
